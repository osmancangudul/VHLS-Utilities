

================================================================
== Vitis HLS Report for 'debouncer'
================================================================
* Date:           Sun Sep 10 03:03:47 2023

* Version:        2023.1 (Build 3854077 on May  4 2023)
* Project:        debouncer-vhls
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: spartan7
* Target device:  xc7s100-fgga676-2


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  3.743 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        0|        0|      0 ns|      0 ns|    1|    1|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 0
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.74>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "%spectopmodule_ln7 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_1" [debouncer.cpp:7]   --->   Operation 2 'spectopmodule' 'spectopmodule_ln7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%specinterface_ln7 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty_2, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0" [debouncer.cpp:7]   --->   Operation 3 'specinterface' 'specinterface_ln7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %sw"   --->   Operation 4 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %sw, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 5 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %out_r"   --->   Operation 6 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %out_r, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 7 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%sw_read = read i1 @_ssdm_op_Read.ap_none.i1, i1 %sw" [debouncer.cpp:7]   --->   Operation 8 'read' 'sw_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%state_load = load i1 %state" [debouncer.cpp:24]   --->   Operation 9 'load' 'state_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%out_tmp = load i1 %previous_sw" [debouncer.cpp:26]   --->   Operation 10 'load' 'out_tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%counter_load = load i64 %counter" [debouncer.cpp:35]   --->   Operation 11 'load' 'counter_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (2.92ns)   --->   "%icmp_ln35 = icmp_eq  i64 %counter_load, i64 0" [debouncer.cpp:35]   --->   Operation 12 'icmp' 'icmp_ln35' <Predicate = true> <Delay = 2.92> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.92> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 13 [1/1] (2.92ns)   --->   "%next_counter = add i64 %counter_load, i64 18446744073709551615" [debouncer.cpp:39]   --->   Operation 13 'add' 'next_counter' <Predicate = (!icmp_ln35 & state_load)> <Delay = 2.92> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.92> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 14 [1/1] (0.00ns) (grouped into LUT with out node next_counter_2)   --->   "%next_counter_1 = select i1 %icmp_ln35, i64 500, i64 %next_counter" [debouncer.cpp:35]   --->   Operation 14 'select' 'next_counter_1' <Predicate = (state_load)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.82> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 15 [1/1] (0.00ns) (grouped into LUT with out node next_state_2)   --->   "%next_state = xor i1 %icmp_ln35, i1 1" [debouncer.cpp:35]   --->   Operation 15 'xor' 'next_state' <Predicate = (state_load)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 16 [1/1] (0.00ns) (grouped into LUT with out node next_state_2)   --->   "%next_state_1 = xor i1 %out_tmp, i1 %sw_read" [debouncer.cpp:26]   --->   Operation 16 'xor' 'next_state_1' <Predicate = (!state_load)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 17 [1/1] (0.82ns) (out node of the LUT)   --->   "%next_counter_2 = select i1 %state_load, i64 %next_counter_1, i64 500" [debouncer.cpp:24]   --->   Operation 17 'select' 'next_counter_2' <Predicate = true> <Delay = 0.82> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.82> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 18 [1/1] (0.81ns) (out node of the LUT)   --->   "%next_state_2 = select i1 %state_load, i1 %next_state, i1 %next_state_1" [debouncer.cpp:24]   --->   Operation 18 'select' 'next_state_2' <Predicate = true> <Delay = 0.81> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.81> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.81ns)   --->   "%out_tmp_1 = select i1 %state_load, i1 %out_tmp, i1 %sw_read" [debouncer.cpp:24]   --->   Operation 19 'select' 'out_tmp_1' <Predicate = true> <Delay = 0.81> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.81> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%store_ln51 = store i1 %out_tmp_1, i1 %previous_sw" [debouncer.cpp:51]   --->   Operation 20 'store' 'store_ln51' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%store_ln52 = store i1 %next_state_2, i1 %state" [debouncer.cpp:52]   --->   Operation 21 'store' 'store_ln52' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%store_ln53 = store i64 %next_counter_2, i64 %counter" [debouncer.cpp:53]   --->   Operation 22 'store' 'store_ln53' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%write_ln54 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %out_r, i1 %out_tmp_1" [debouncer.cpp:54]   --->   Operation 23 'write' 'write_ln54' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%ret_ln56 = ret" [debouncer.cpp:56]   --->   Operation 24 'ret' 'ret_ln56' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 3.743ns
The critical path consists of the following:
	'load' operation ('counter_load', debouncer.cpp:35) on static variable 'counter' [15]  (0.000 ns)
	'add' operation ('next_counter', debouncer.cpp:39) [17]  (2.920 ns)
	'select' operation ('next_counter', debouncer.cpp:35) [18]  (0.000 ns)
	'select' operation ('next_counter', debouncer.cpp:24) [21]  (0.823 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
